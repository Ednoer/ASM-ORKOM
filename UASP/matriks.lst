     1                                 %line 1+1 matriks.asm
     2                                 
     3                                 [extern scanf]
     4                                 [extern printf]
     5                                 [extern fflush]
     6                                 
     7                                 [section .data]
     8 00000000 256400                  fmt1 db "%d", 0
     9 00000003 25640A00                fmt2 db "%d", 10, 0
    10 00000007 110000000E00000018-     array dd 17, 14, 24, 11, 18
    11 00000007 0000000B0000001200-
    12 00000007 0000               
    13 0000001B 15000000060000000D-     dd 21, 6, 13, 19, 25
    14 0000001B 000000130000001900-
    15 0000001B 0000               
    16 0000002F 0A0000001600000014-     dd 10, 22, 20, 12, 7
    17 0000002F 0000000C0000000700-
    18 0000002F 0000               
    19 00000043 030000000F00000017-     dd 3, 15, 23, 5, 1
    20 00000043 000000050000000100-
    21 00000043 0000               
    22 00000057 080000000400000009-     dd 8, 4, 9, 16, 2
    23 00000057 000000100000000200-
    24 00000057 0000               
    25                                 
    26                                 [section .bss]
    27 00000000 <gap>                   a resd 1
    28                                 
    29                                 [section .text]
    30                                 [global main]
    31                                 
    32                                 main:
    33 00000000 68[00000000]            push a
    34 00000005 68[00000000]            push fmt1
    35 0000000A E8(F6FFFFFF)            call scanf
    36 0000000F 83C408                  add esp, 8
    37                                 
    38 00000012 A1[00000000]            mov eax, [a]
    39 00000017 BB14000000              mov ebx, 20
    40 0000001C F7E3                    mul ebx
    41                                 
    42 0000001E 83F800                  cmp eax, 0
    43 00000021 0F847C000000            je nol
    44                                 
    45                                 
    46                                 benar:
    47 00000027 89D6                    mov esi, edx
    48 00000029 EB21                    jmp looping1
    49                                 
    50                                 benar1:
    51 0000002B 89D6                    mov esi, edx
    52 0000002D EB2C                    jmp looping2
    53                                 
    54                                 benar2:
    55 0000002F 89D6                    mov esi, edx
    56 00000031 EB37                    jmp looping3
    57                                 
    58                                 benar3:
    59 00000033 89D6                    mov esi, edx
    60 00000035 EB42                    jmp looping4
    61                                 
    62                                 benar4:
    63 00000037 89D6                    mov esi, edx
    64 00000039 EB4D                    jmp looping5
    65                                 
    66                                 benar5:
    67 0000003B 89D6                    mov esi, edx
    68 0000003D EB58                    jmp print
    69                                 
    70                                 
    71                                 looping:
    72 0000003F 8B90[00000000]          mov edx, dword[array+eax]
    73 00000045 83C004                  add eax, 4
    74 00000048 39DA                    cmp edx, ebx
    75 0000004A 89D3                    mov ebx, edx
    76 0000004C 73D7                    jae benar
    77                                 
    78                                 looping1:
    79 0000004E 8B90[00000000]          mov edx, dword[array+eax]
    80 00000054 83C004                  add eax, 4
    81 00000057 39DA                    cmp edx, ebx
    82 00000059 89D3                    mov ebx, edx
    83 0000005B 73CC                    jae benar1
    84                                 
    85                                 looping2:
    86 0000005D 8B90[00000000]          mov edx, dword[array+eax]
    87 00000063 83C004                  add eax, 4
    88 00000066 39DA                    cmp edx, ebx
    89 00000068 89D3                    mov ebx, edx
    90 0000006A 73C1                    jae benar2
    91                                 
    92                                 looping3:
    93 0000006C 8B90[00000000]          mov edx, dword[array+eax]
    94 00000072 83C004                  add eax, 4
    95 00000075 39DA                    cmp edx, ebx
    96 00000077 89D3                    mov ebx, edx
    97 00000079 73B6                    jae benar3
    98                                 
    99                                 looping4:
   100 0000007B 8B90[00000000]          mov edx, dword[array+eax]
   101 00000081 83C004                  add eax, 4
   102 00000084 39DA                    cmp edx, ebx
   103 00000086 89D3                    mov ebx, edx
   104 00000088 73AB                    jae benar4
   105                                 
   106                                 looping5:
   107 0000008A 8B90[00000000]          mov edx, dword[array+eax]
   108 00000090 83C004                  add eax, 4
   109 00000093 39DA                    cmp edx, ebx
   110 00000095 89D3                    mov ebx, edx
   111 00000097 73A0                    jae benar5
   112                                 
   113                                 print:
   114 00000099 56                      push esi
   115 0000009A 68[00000000]            push fmt2
   116 0000009F E8(F6FFFFFF)            call printf
   117 000000A4 83C408                  add esp, 8
   118                                 
   119 000000A7 EB13                    jmp exit
   120                                 
   121                                 nol:
   122 000000A9 B818000000              mov eax,24
   123 000000AE 50                      push eax
   124 000000AF 68[00000000]            push fmt2
   125 000000B4 E8(F6FFFFFF)            call printf
   126 000000B9 83C408                  add esp, 8
   127                                 
   128 000000BC EBFE                    jmp exit
   129                                 
   130                                 
   131                                 
   132                                 exit:
   133 000000BE 6A00                    push 0
   134 000000C0 E8(F6FFFFFF)            call fflush
   135 000000C5 B801000000              mov eax, 1
   136 000000CA BB00000000              mov ebx, 0
   137 000000CF CD80                    int 0x80
